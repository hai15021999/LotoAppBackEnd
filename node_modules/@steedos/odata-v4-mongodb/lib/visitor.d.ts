export declare class Visitor {
    query: any;
    sort: any;
    skip: number;
    limit: number;
    projection: any;
    collection: string;
    navigationProperty: string;
    includes: Visitor[];
    inlinecount: boolean;
    ast: any;
    constructor();
    Visit(node: any, context?: any): this;
    protected VisitODataUri(node: any, context: any): void;
    protected VisitEntitySetName(node: any, context: any): void;
    protected VisitExpand(node: any, context: any): void;
    protected VisitExpandItem(node: any, context: any): void;
    protected VisitExpandPath(node: any, context: any): void;
    protected VisitQueryOptions(node: any, context: any): void;
    protected VisitInlineCount(node: any, context: any): void;
    protected VisitFilter(node: any, context: any): void;
    protected VisitOrderBy(node: any, context: any): void;
    protected VisitSkip(node: any, context: any): void;
    protected VisitTop(node: any, context: any): void;
    protected VisitOrderByItem(node: any, context: any): void;
    protected VisitSelect(node: any, context: any): void;
    protected VisitSelectItem(node: any, context: any): void;
    protected VisitAndExpression(node: any, context: any): void;
    protected VisitOrExpression(node: any, context: any): void;
    protected VisitBoolParenExpression(node: any, context: any): void;
    protected VisitCommonExpression(node: any, context: any): void;
    protected VisitFirstMemberExpression(node: any, context: any): void;
    protected VisitMemberExpression(node: any, context: any): void;
    protected VisitPropertyPathExpression(node: any, context: any): void;
    protected VisitSingleNavigationExpression(node: any, context: any): void;
    protected VisitODataIdentifier(node: any, context: any): void;
    protected VisitNotExpression(node: any, context: any): void;
    protected VisitEqualsExpression(node: any, context: any): void;
    protected VisitNotEqualsExpression(node: any, context: any): void;
    protected VisitInExpression(node: any, context: any): void;
    protected VisitNotInExpression(node: any, context: any): void;
    protected VisitLesserThanExpression(node: any, context: any): void;
    protected VisitLesserOrEqualsExpression(node: any, context: any): void;
    protected VisitGreaterThanExpression(node: any, context: any): void;
    protected VisitGreaterOrEqualsExpression(node: any, context: any): void;
    protected VisitLiteral(node: any, context: any): void;
    protected VisitMethodCallExpression(node: any, context: any): void;
}
